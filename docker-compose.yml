services:
  client:
    build:
      context: .
      dockerfile: client/Dockerfile
    env_file:
      - .env
    container_name: ${DOCKER_CLIENT}
    ports:
      - "${DOCKER_CLIENT_PORT}:80"
    depends_on:
      server:
        condition: service_started
    restart: always
    networks:
      - my_network

  server:
    build:
      context: .
      dockerfile: Dockerfile
    env_file:
      - .env
    container_name: ${DOCKER_SERVER}
    command: ["app"]
    ports:
      - "${DOCKER_SERVER_PORT}:8000"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
    restart: always
    volumes:
      - logs:/app/logs
      - backup_database:/app/backup_database
    networks:
      - my_network

  db:
    image: postgres:15.7-alpine
    env_file:
      - .env
    container_name: ${DOCKER_DATABASE}
    environment:
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASS}
    ports:
      - '${DOCKER_DATABASE_PORT}:5432'
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d ${DB_NAME} -U ${DB_USER}"]
      interval: 10s
      timeout: 10s
      retries: 30
    volumes:
      - ../db/:/var/lib/postgresql/data
      - ./docker_set_files/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - my_network
    restart: always


  redis:
    image: redis:latest
    env_file:
      - .env
    container_name: ${DOCKER_REDIS}
    ports:
      - '${DOCKER_REDIS_PORT}:6379'
    depends_on:
      db:
        condition: service_healthy
    networks:
      - my_network
    restart: always

  celery:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: ${DOCKER_CELERY}
    command: ["celery"]
    depends_on:
      redis:
        condition: service_started
    volumes:
      - logs:/app/logs
      - backup_database:/app/backup_database
    restart: always
    networks:
      - my_network

  flower:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: ${DOCKER_FLOWER}
    ports:
      - "${DOCKER_FLOWER_PORT}:5555"
    command: ["flower"]
    depends_on:
      redis:
        condition: service_started
    restart: always
    networks:
      - my_network

volumes:
  logs:
  backup_database:

networks:
  my_network:
    driver: bridge
